<?php
/** pahooWeather.php
 * 気象情報に関わるクラス
 *
 * @copyright	(c)studio pahoo
 * @author		パパぱふぅ
 * @動作環境	PHP 5/7/8
 * @参考URL		https://www.pahoo.org/e-soul/webtech/php06/php06-72-01.shtm
 *				https://www.pahoo.org/e-soul/webtech/php06/php06-53-01.shtm
*/

//pahooWeatherクラス ========================================================
class pahooWeather {
	//予報値地点情報ファイル（出力）
	const FILE_JMASPOTS = 'jmaweatherspots.xml';
	//予報値地点情報ファイルのバージョン
	const FILE_VERSION = '2.1';

	//気象庁防災情報XML：長期フィード - 定時配信
	const FEED_REGULAR_L = 'http://www.data.jma.go.jp/developer/xml/feed/regular_l.xml';

	var $jmaWeeklyWeather;	//天気予報情報（配列）
	var $spots;				//予報地点情報（配列）
	var $xmlfile;			//直前に呼び出したXMLファイルのURL（配列）
	var $error;				//エラーフラグ
	var $errmsg;			//エラーメッセージ
	var $pcc;				//pahooCacheオブジェクト

/**
 * コンストラクタ
 * @param	object $pcc pahooCacheオブジェクト
 * @return	なし
*/
function __construct($pcc) {
	$this->error   = FALSE;
	$this->errmsg  = '';
	$this->spots   = array();
	$this->xmlfile = array('', '', '', '');
	$this->pcc     = $pcc;

	//PHPバージョンチェック
	if (! isphp5over()) {
		$this->error   = TRUE;
		$this->errmsg  = '動作にはPHP5以上が必要です';
	}

	//予報地点情報を読み込む
	$this->readJmaSpots();
}

/**
 * デストラクタ
 * @return	なし
*/
function __destruct() {
	unset($this->jmaWeeklyWeather);
	unset($this->spots);
	unset($this->xmfile);
}

/**
 * エラー状況
 * @return	bool TRUE:異常／FALSE:正常
*/
function iserror() {
	return $this->error;
}

/**
 * エラーメッセージ取得
 * @param	なし
 * @return	string 現在発生しているエラーメッセージ
*/
function geterror() {
	return $this->errmsg;
}

/**
 * PHP5以上かどうか検査する
 * @return	bool TRUE：PHP5以上／FALSE:PHP5未満
*/
function isphp5over() {
	$version = explode('.', phpversion());

	return $version[0] >= 5 ? TRUE : FALSE;
}

/**
 * 無効な証明書サイトからXML取得できるようにする
 * @param	なし
 * @return	なし
*/
function unknown_certificate() {
	$context = array(
		'ssl' => array(
			'verify_peer' => FALSE,
			'verify_peer_name' => FALSE,
		)
	);
	libxml_set_streams_context(stream_context_create($context));
}

/**
 * 予報地点情報を読み込む
 * @param	なし
 * @return	bool TRUE：読込成功／FALSE：失敗
*/
function readJmaSpots() {
	$cnt = 0;

	$xml = @simplexml_load_file(self::FILE_JMASPOTS);
	//レスポンス・チェック
	if (isset($xml->spot) == FALSE) {
		$res = FALSE;
			$this->error = TRUE;
		$this->errmsg = '予報地点ファイル "' . self::FILE_JMASPOTS . '" がありません';
	//バージョン・チェック
	} else if ($xml->version != self::FILE_VERSION) {
		$res = FALSE;
			$this->error = TRUE;
		$this->errmsg = '予報地点ファイル "' . self::FILE_JMASPOTS . '" のバージョンが違います';
	} else {
		//必要な情報を配列へ格納
		foreach ($xml->spot as $spot) {
			$this->spots[$cnt]['code']        = (string)$spot->code;
			$this->spots[$cnt]['page']        = (string)$spot->page;
			$this->spots[$cnt]['regionCode']  = (string)$spot->regionCode;
			$this->spots[$cnt]['regionName']  = (string)$spot->regionName;
			$this->spots[$cnt]['prefCode']    = (string)$spot->prefCode;
			$this->spots[$cnt]['prefName']    = (string)$spot->prefName;
			$this->spots[$cnt]['areaCode']    = (string)$spot->areaCode;
			$this->spots[$cnt]['areaName']    = (string)$spot->areaName;
			$this->spots[$cnt]['stationName'] = (string)$spot->stationName;
			$this->spots[$cnt]['stationCode'] = (string)$spot->stationCode;
			$this->spots[$cnt]['longitude']   = (float)$spot->longitude;
			$this->spots[$cnt]['latitude']    = (float)$spot->latitude;
			$this->spots[$cnt]['location']    = (float)$spot->location;
			$cnt++;
		}
		if ($cnt == 0) {
			$res = FALSE;
			$this->error = TRUE;
			$this->errmsg = '予報地点ファイル "' . self::FILE_JMASPOTS . '" がありません';
		} else {
			$res = TRUE;
		}
	}
	return $res;
}

/**
 * 指定した緯度・経度に最も近い予報地点コードを返す
 * @param	object $pgc pahooGeoCodeオブジェクト
 * @param	double $longitude 経度（世界測地系）
 * @param	double $latitude  緯度（世界測地系）
 * @param	int    $forecast  0：天気予報，1：週間天気予報（省略時：1）
 * @return	string 予報地点コード／NULL：合致する予報地点がない
*/
function getJmaNearSpot($pgc, $longitude, $latitude, $forecast=1) {
	//電文コード
	$code = ($forecast == 0) ? 'VPFD51' : 'VPFW50';

	$res = NULL;
	$cnt = 0;
	$d0  = 999999999;
	//電文コードが一致する予報地点を選んで2地点間の距離を計算
	while (1) {
		if ($this->spots[$cnt]['code'] == $code
			&& isset($this->spots[$cnt]['stationCode'])
			&& isset($this->spots[$cnt]['longitude'])
			&& isset($this->spots[$cnt]['latitude'])) {
			$d1 = $pgc->distance($this->spots[$cnt]['longitude'], $this->spots[$cnt]['latitude'], $longitude, $latitude);
			//距離がより小さければ採用
			if ($d1 < $d0) {
				$res = (string)$this->spots[$cnt]['stationCode'];
				$d0 = $d1;
			}
			$cnt++;
		} else {
			break;
		}
	}
	return $res;
}

/**
 * 天気予報の平仮名を省略してテキストを短縮
 * （情報XMLの予報情報を気象庁サイトの予報情報に合わせる）
 * @param	string $weather 天気予報
 * @return	短縮後テキスト
*/
function jmaShortWeather($weather) {
	$weather = preg_replace('/くもり/ui', '曇', $weather);
	$weather = preg_replace('/[ぁ-ゖ]/ui', '', $weather);

	return $weather;
}

/**
 * 天気予報の記号（テロップ番号）を参照画像URLに変換
 * （情報XMLのテロップ番号を気象庁サイトのアイコン番号に変換）
 * @param	int $telop テロップ番号
 * @param	int $mode  0：日中，1：夜間（省略時＝0）
 *						夜間を選ぶと，晴れマーク（太陽）が月・星になる
 * @return	参照画像URL
*/
function jma_telop2url($telop, $mode=0) {
	static $table = array(
100 => array(100, 500),
101 => array(101, 501),
102 => array(102, 502),
103 => array(102, 502),
104 => array(104, 504),
105 => array(104, 504),
106 => array(102, 502),
107 => array(102, 502),
108 => array(102, 502),
110 => array(110, 510),
111 => array(110, 510),
112 => array(112, 512),
113 => array(112, 512),
114 => array(112, 512),
115 => array(115, 515),
116 => array(115, 515),
117 => array(115, 515),
118 => array(112, 512),
119 => array(112, 512),
120 => array(102, 502),
121 => array(102, 502),
122 => array(112, 512),
123 => array(100, 500),
124 => array(100, 500),
125 => array(112, 512),
126 => array(112, 512),
127 => array(112, 512),
128 => array(112, 512),
130 => array(100, 500),
131 => array(100, 500),
132 => array(101, 501),
140 => array(102, 502),
160 => array(104, 504),
170 => array(104, 504),
181 => array(115, 515),
200 => array(200, 200),
201 => array(201, 601),
202 => array(202, 202),
203 => array(202, 202),
204 => array(204, 204),
205 => array(204, 204),
206 => array(202, 202),
207 => array(202, 202),
208 => array(202, 202),
209 => array(200, 200),
210 => array(210, 610),
211 => array(210, 610),
212 => array(212, 212),
213 => array(212, 212),
214 => array(212, 212),
215 => array(215, 215),
216 => array(215, 215),
217 => array(215, 215),
218 => array(212, 212),
219 => array(212, 212),
220 => array(202, 202),
221 => array(202, 202),
222 => array(212, 212),
223 => array(201, 601),
224 => array(212, 212),
225 => array(212, 212),
226 => array(212, 212),
228 => array(215, 215),
229 => array(215, 215),
230 => array(215, 215),
231 => array(200, 200),
240 => array(202, 202),
250 => array(204, 204),
260 => array(204, 204),
270 => array(204, 204),
281 => array(215, 215),
300 => array(300, 300),
301 => array(301, 701),
302 => array(302, 302),
303 => array(303, 303),
304 => array(300, 300),
306 => array(300, 300),
308 => array(308, 308),
309 => array(303, 303),
311 => array(311, 711),
313 => array(313, 313),
314 => array(314, 314),
315 => array(314, 314),
316 => array(311, 711),
317 => array(313, 313),
320 => array(311, 711),
321 => array(313, 313),
322 => array(303, 303),
323 => array(311, 711),
324 => array(311, 711),
325 => array(311, 711),
326 => array(314, 314),
327 => array(314, 314),
328 => array(300, 300),
329 => array(300, 300),
340 => array(400, 400),
350 => array(300, 300),
361 => array(411, 811),
371 => array(413, 413),
400 => array(400, 400),
401 => array(401, 801),
402 => array(402, 402),
403 => array(403, 403),
405 => array(400, 400),
406 => array(406, 406),
407 => array(406, 406),
409 => array(403, 403),
411 => array(411, 811),
413 => array(413, 413),
414 => array(414, 414),
420 => array(411, 811),
421 => array(413, 413),
422 => array(414, 414),
423 => array(414, 414),
425 => array(400, 400),
426 => array(400, 400),
427 => array(400, 400),
450 => array(400, 400),
);

	return isset($table[$telop]) ? 
		'https://www.jma.go.jp/bosai/forecast/img/' . $table[$telop][$mode] . '.svg' : '';
}

/**
 * 気象庁防災情報XMLから最新の天気予報情報URLを取得
 * @param	int $page  ページ番号
 * @return	array(VPFD51, VPFW50)／FALSE：取得失敗
*/
function jmaGetWeatherForecastURL($page) {
	//URLパターン
	$vpfd51 = sprintf('/http\:\/\/www\.data\.jma\.go\.jp\/developer\/xml\/data\/([0-9\_]+)VPFD51\_%06d\.xml/ui', $page);
	$vpfw50 = sprintf('/http\:\/\/www\.data\.jma\.go\.jp\/developer\/xml\/data\/([0-9\_]+)VPFW50\_%06d\.xml/ui', $page);

	$xml = $this->pcc->simplexml_load(self::FEED_REGULAR_L);
	//レスポンス・チェック
	if ($this->pcc->iserror()) {
		$this->error  = TRUE;
		$this->errmsg = $this->pcc->errmsg;
		return FALSE;
	} else if (! isset($xml->entry)) {
		$this->error  = TRUE;
		$this->errmsg = '"' . self::FEED_REGULAR_L . '" の解釈に失敗しました';
		return FALSE;
	}
	$this->xmlfile[0] = self::FEED_REGULAR_L;

	//フィード（XMLファイル）解析
	$vpfd51_url = $vpfd51_dt = '';
	$vpfw50_url = $vpfw50_dt = '';
	$res = FALSE;
	foreach ($xml->entry as $node) {
		//日時がより新しいURLを採用
		if (preg_match($vpfd51, $node->id, $arr) > 0) {
			if ($arr[1] > $vpfd51_dt) {
				$vpfd51_url = $arr[0];
				$vpfd51_dt  = $arr[1];
				$res = TRUE;
			}
		} else if (preg_match($vpfw50, $node->id, $arr) > 0) {
			if ($arr[1] > $vpfw50_dt) {
				$vpfw50_url = $arr[0];
				$vpfw50_dt  = $arr[1];
				$res = TRUE;
			}
		}
	}

	//エラー・チェック
	if (! $res) {
		$this->error  = TRUE;
		$this->errmsg = '気象庁防災情報XMLから週間天気予報情報を取得できません';
		return FALSE;
	}

	$this->xmlfile[1] = $vpfw50_url;
	$this->xmlfile[2] = $vpfd51_url;

	return array($vpfd51_url, $vpfw50_url);
}

/**
 * 気象庁防災情報XMLから天気予報情報を読み込む
 * @param	array  $items    天気予報を格納する配列
 * @param	string $station  予報地点コード
 * @param	int    $forecast 0：天気予報，1：週間天気予報（省略時：1）
 *					0のとき‥‥jmaWeeklyWeather[0](本日)～[6](6日後)に代入
 *					1のとき‥‥jmaWeeklyWeather[0](本日)～[2](2日後)に代入
 * @return	bool TRUE：成功／FALSE：失敗
*/
function jmaGetWeatherForecast(&$items, $station, $forecast=1) {
	//電文コード
	$code = ($forecast == 0) ? 'VPFD51' : 'VPFW50';
	//名前空間
	define('JMX_EB', 'http://xml.kishou.go.jp/jmaxml1/elementBasis1/');
	//曜日
	static $week_name = array('日', '月', '火', '水', '木', '金', '土');
	//マッチングパターン
	$pat11 = '/([0-9]+)\-([0-9]+)\-([0-9]+)/ui';				//年月日
	$pat12 = '/([0-9]+)\-([0-9]+)\-([0-9]+)T([0-9]+)\:/ui';		//年月日時
	$pat21 = '/から/ui';										//降水確率
	$pat31 = '/最低気温/ui';									//最低気温
	$pat32 = '/^日中の最高気温/ui';								//最高気温

	//予報地点コードの取得
	$res = FALSE;
	foreach ($this->spots as $id=>$spot) {
		if (($spot['code'] == $code) && ($spot['stationCode'] == $station)) {
			$res = TRUE;
			break;
		}
	}
	if ($res == FALSE) {
		$this->error  = TRUE;
		$this->errmsg = '予報地点コードが見つかりません';
		return FALSE;
	}

	//初日のみ初期化
	$i = 0;
	$dt = new DateTime(date('Y-m-d'));
	$this->jmaWeeklyWeather[$i]['year']  = date('Y');
	$this->jmaWeeklyWeather[$i]['month'] = date('n');
	$this->jmaWeeklyWeather[$i]['day']   = date('j');
	$this->jmaWeeklyWeather[$i]['week']  = (string)$week_name[date_format($dt, 'w')];
	$this->jmaWeeklyWeather[$i]['stationName'] = $this->spots[$id]['stationName'];
	$this->jmaWeeklyWeather[$i]['weather']  = '';
	$this->jmaWeeklyWeather[$i]['image']    = '';
	$this->jmaWeeklyWeather[$i]['rainy']    = '';
	$this->jmaWeeklyWeather[$i]['temp_max'] = '';
	$this->jmaWeeklyWeather[$i]['temp_min'] = '';

	//最新の週間天気予報情報URLを取得
	$page = $this->spots[$id]['page'];
	$area = $this->spots[$id]['areaCode'];
	$station = $this->spots[$id]['stationCode'];

	list($vpfd51, $vpfw50) = $this->jmaGetWeatherForecastURL($page);
	if ($this->pcc->iserror()) {
		$this->error  = TRUE;
		$this->errmsg = $this->pcc->geterror();
		return FALSE;
	}
	if ($this->error)		return FALSE;
	if ($this->pcc->error)	return FALSE;

	$this->jmaWeeklyWeather['stationCode']  = $this->spots[$id]['stationCode'];
	$this->jmaWeeklyWeather['stationName']  = $this->spots[$id]['stationName'];
	$this->jmaWeeklyWeather['location']     = $this->spots[$id]['location'];

	//VPFW51（府県週間天気予報）の解析
	if ($forecast == 1) {
		$xml = $this->pcc->simplexml_load($vpfw50);
		//レスポンス・チェック
		if ($this->pcc->iserror()) {
			$this->error  = TRUE;
			$this->errmsg = $this->pcc->errmsg;
			return FALSE;
		} else if (! isset($xml->Body->MeteorologicalInfos)) {
			$this->error  = TRUE;
			$this->errmsg = '"' . $vpfw50 . '" の解釈に失敗しました';
			return FALSE;
		}

		//年月日取得
		foreach ($xml->Body->MeteorologicalInfos->TimeSeriesInfo->TimeDefines->TimeDefine as $TimeDefine) {
			if (preg_match($pat11, $TimeDefine->DateTime, $arr) > 0) {
				//最初の情報は何時か
				$i = (int)$TimeDefine['timeId'];
				if ($i == 1) {
					//$dd = ((date('j') == (int)$arr[3])) ? (-1) : 0;
					//v.5.02
					$ss2 = date('Y-m-d');
					if ($ss2 < $arr[0])			$dd = 0;		//明日
					else if ($ss2 == $arr[0])	$dd = (-1);		//今日
					else 						$dd = (-2);		//昨日
				}
				$i += $dd;
				if ($i < 0)		continue;	//v.5.02
				//予報1日分の初期化
				$dt = new DateTime($arr[0]);
				$this->jmaWeeklyWeather[$i]['year']  = (int)$arr[1];
				$this->jmaWeeklyWeather[$i]['month'] = (int)$arr[2];
				$this->jmaWeeklyWeather[$i]['day']   = (int)$arr[3];
				$this->jmaWeeklyWeather[$i]['week']  = (string)$week_name[date_format($dt, 'w')];
				$this->jmaWeeklyWeather[$i]['weather']  = '';
				$this->jmaWeeklyWeather[$i]['image']    = '';
				$this->jmaWeeklyWeather[$i]['rainy']    = '';
				$this->jmaWeeklyWeather[$i]['temp_max'] = '';
				$this->jmaWeeklyWeather[$i]['temp_min'] = '';
			}
		}

		foreach ($xml->Body->MeteorologicalInfos as $info) {
			//天気・降水確率の取得
			if ((string)$info['type'] == '区域予報') {
				foreach ($info->TimeSeriesInfo->Item as $item) {
					if ((string)$item->Area->Code != $area)		continue;
					foreach ($item->Kind as $kind) {
						if ((string)$kind->Property->Type == '天気') {
							$node = $kind->Property->WeatherPart->children(JMX_EB);
							foreach ($node->Weather as $Weather) {
								$id = (int)$Weather->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								$this->jmaWeeklyWeather[$id]['weather'] = $this->jmaShortWeather((string)$Weather);
							}
							$node = $kind->Property->WeatherCodePart->children(JMX_EB);
							foreach ($node->WeatherCode as $WeatherCode) {
								$id = (int)$WeatherCode->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								//当日夜間
								if (($id == 0) && (date('H') >= 18)) {
									$this->jmaWeeklyWeather[$id]['image'] = $this->jma_telop2url((int)$WeatherCode, 1);
								} else {
									$this->jmaWeeklyWeather[$id]['image'] = $this->jma_telop2url((int)$WeatherCode, 0);
								}
							}
						} else if ((string)$kind->Property->Type == '降水確率') {
							$node = $kind->Property->ProbabilityOfPrecipitationPart->children(JMX_EB);
							foreach ($node->ProbabilityOfPrecipitation as $rainy) {
								$id = (int)$rainy->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								$this->jmaWeeklyWeather[$id]['rainy'] = (string)$rainy;
							}
						}
					}
				}
			//最低気温・最高気温
			} else if ((string)$info['type'] == '地点予報') {
				foreach ($info->TimeSeriesInfo->Item as $item) {
					if ((int)$item->Station->Code != $station)	continue;
					foreach ($item->Kind->Property as $property) {
						if ((string)$property->Type == '最低気温') {
							$node = $property->TemperaturePart->children(JMX_EB);
							foreach ($node->Temperature as $Temperature) {
								$id = (int)$Temperature->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								$this->jmaWeeklyWeather[$id]['temp_min'] = (string)$Temperature;	//v.5.02
							}
						} else if ((string)$property->Type == '最高気温') {
							$node = $property->TemperaturePart->children(JMX_EB);
							foreach ($node->Temperature as $Temperature) {
								$id = (int)$Temperature->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								$this->jmaWeeklyWeather[$id]['temp_max'] = (string)$Temperature;	//v.5.02
							}
						}
					}
				}
			}
		}
	}

	//VPFD51（府県天気予報 R1）の解析
	//v.5.03修正（ここから）
	$code = 'VPFD51';
	//予報地点コードの取得
	$res = FALSE;
	foreach ($this->spots as $id=>$spot) {
		if (($spot['code'] == $code) && ($spot['stationCode'] == $station)) {
			$res = TRUE;
			break;
		}
	}
	if ($res == FALSE) {
		$this->error  = TRUE;
		$this->errmsg = '予報地点コードが見つかりません';
		return FALSE;
	}
	$area = $this->spots[$id]['areaCode'];
	//v.5.03修正（ここまで）

	$xml = $this->pcc->simplexml_load($vpfd51);
	//レスポンス・チェック
	if ($this->pcc->iserror()) {
		$this->error  = TRUE;
		$this->errmsg = $this->pcc->errmsg;
		return FALSE;
	} else if (! isset($xml->Body->MeteorologicalInfos)) {
		$this->error  = TRUE;
		$this->errmsg = '"' . $vpfd51 . '" の解釈に失敗しました';
		return FALSE;
	}

	//初期化
	$rain_table = array('-', '-', '-', '-', '-', '-', '-', '-');
	$temp_table = array(0, 0, 0, 0);

	foreach ($xml->Body->MeteorologicalInfos as $info) {
		if ((string)$info['type'] == '区域予報') {
			foreach ($info->TimeSeriesInfo as $TimeSeriesInfo) {
				//日時
				foreach ($TimeSeriesInfo->TimeDefines->TimeDefine as $TimeDefine) {
					if (preg_match($pat21, $TimeDefine->Name, $arr) > 0) {
						preg_match($pat12, $TimeDefine->DateTime, $arr);
						$ss1 = $arr[1] . '-' . $arr[2] . '-' . $arr[3];
						//最初の情報は何時か
						$i = (int)$TimeDefine['timeId'];
						if ($i == 1) {
						//	$dd = ((date('j') == (int)$arr[3])) ? (-1) : 0;
							//v.5.02
							$ss2 = date('Y-m-d');
							if ($ss2 < $ss1)			$dd = 0;		//明日
							else if ($ss2 == $ss1)		$dd = (-1);		//今日
							else 						$dd = (-2);		//昨日
							$d2 = $arr[4] / 6;		//6時間毎
							//v.5.02
							if ($dd == (-2))	$d2 = $d2 - 4 + 1;
							//年月日代入（天気予報の場合）
							if ($forecast == 0) {
								$dt = new DateTime($arr[1] . '-' . $arr[2] . '-' . $arr[3]);
								for ($j = 0; $j < 3; $j++) {
									$this->jmaWeeklyWeather[$j]['year']  = (int)date_format($dt, 'Y');
									$this->jmaWeeklyWeather[$j]['month'] = (int)date_format($dt, 'n');
									$this->jmaWeeklyWeather[$j]['day']   = (int)date_format($dt, 'j');
									$this->jmaWeeklyWeather[$j]['week']  = (string)$week_name[date_format($dt, 'w')];
									date_add($dt, date_interval_create_from_date_string('1 days'));
								}
							}
						}

					} else if (preg_match($pat11, $TimeDefine->DateTime, $arr) > 0) {
						//最初の情報は今日か明日か
						$i = (int)$TimeDefine['timeId'];
						if ($i == 1) {
						//	$dd = ((date('j') == (int)$arr[3])) ? (-1) : 0;
							//v.5.02
							$ss2 = date('Y-m-d');
							if ($ss2 < $arr[0])			$dd = 0;		//明日
							else if ($ss2 == $arr[0])	$dd = (-1);		//今日
							else 						$dd = (-2);		//昨日

						}
					}
				}
				//地方コードは上何桁で判定するか
				$flag = FALSE;
				$n = 5;
				for ($n = 5; $n >= 1; $n--) {
					foreach ($TimeSeriesInfo->Item as $item) {
						if (substr((string)$item->Area->Code, 0, $n) != substr($area, 0, $n))		continue;
						$flag = TRUE;
					}
					if ($flag)	break;
				}
				//天気予報
				foreach ($TimeSeriesInfo->Item as $item) {
					foreach ($item->Kind as $kind) {
						if (substr((string)$item->Area->Code, 0, $n) != substr($area, 0, $n))		continue;
						if ((string)$kind->Property->Type == '天気') {
							$node = $kind->Property->WeatherPart->children(JMX_EB);
							foreach ($node->Weather as $Weather) {
								$id = (int)$Weather->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								$this->jmaWeeklyWeather[$id]['weather'] = $this->jmaShortWeather((string)$Weather);
							}
							$node = $kind->Property->WeatherCodePart->children(JMX_EB);
							foreach ($node->WeatherCode as $WeatherCode) {
								$id = (int)$WeatherCode->attributes()->refID + $dd;
								if ($id < 0)	continue;	//v.5.02
								if (($id == 0) && (date('H') >= 18)) {
									$this->jmaWeeklyWeather[$id]['image'] = $this->jma_telop2url((int)$WeatherCode, 1);
								} else {
									$this->jmaWeeklyWeather[$id]['image'] = $this->jma_telop2url((int)$WeatherCode, 0);
								}
							}
						//降水確率
						} else if ((string)$kind->Property->Type == '降水確率') {
							$node = $kind->Property->ProbabilityOfPrecipitationPart->children(JMX_EB);
							foreach ($node->ProbabilityOfPrecipitation as $rainy) {
								$id = (int)$rainy->attributes()->refID + $dd + $d2;
								if ($id < 0)	continue;	//v.5.02
								$rain_table[$id] = (string)$rainy;
							}
						}
					}
				}
			}
		} else if ((string)$info['type'] == '地点予報') {
			foreach ($info->TimeSeriesInfo as $TimeSeriesInfo) {
				//日時
				foreach ($TimeSeriesInfo->TimeDefines->TimeDefine as $TimeDefine) {
					if (preg_match($pat11, $TimeDefine->DateTime, $arr) > 0) {
						//最初の情報は何時か
						$i = (int)$TimeDefine['timeId'];
						if ($i == 1) {
						//	$dd = ((date('j') == (int)$arr[3])) ? (-1) : 0;
							//v.5.02
							$ss2 = date('Y-m-d');
							if ($ss2 < $arr[0])			$dd = 0;		//明日
							else if ($ss2 == $arr[0])	$dd = (-1);		//今日
							else 						$dd = (-2);		//昨日
							$temp_table[$i] = 0;
							$day0 = (int)$arr[3];
						} else {
							$temp_table[$i] = ($day0 == (int)$arr[3]) ? 0 : 1;
							$day0 = (int)$arr[3];
						}
					}
				}
				//最低気温・最高気温
				$id = 1 + $dd;
				foreach ($TimeSeriesInfo->Item as $item) {
					if ((int)$item->Station->Code != $station)	continue;
					foreach ($item->Kind->Property as $property) {
						if (preg_match($pat31, (string)$property->Type) > 0) {
							$node = $property->TemperaturePart->children(JMX_EB);
							$id += $temp_table[(int)$node->Temperature->attributes()->refID];
							if ($id < 0)	continue;	//v.5.02
							$this->jmaWeeklyWeather[$id]['temp_min'] = (string)$node->Temperature;		//v.5.02
						} else if (preg_match($pat32, (string)$property->Type) > 0) {
							$node = $property->TemperaturePart->children(JMX_EB);
							$id += $temp_table[(int)$node->Temperature->attributes()->refID];
							if ($id < 0)	continue;	//v.5.02
							$this->jmaWeeklyWeather[$id]['temp_max'] = (string)$node->Temperature;		//v.5.02
						}
					}
				}
			}
		}
	}
	//降水確率を天気予報情報へ
	foreach ($rain_table as $key=>$val) {
		//v.5.02
		if (($dd == (-2)) && ($key >= 4))	break;
		$id = floor($key / 4);
		if (! isset($this->jmaWeeklyWeather[$id]['rainy'])) {
			$this->jmaWeeklyWeather[$id]['rainy'] = '';
		}
		//週間予報で取得した降水確率があれば上書き
		if (isset($this->jmaWeeklyWeather[$id]['rainy']) && is_numeric($this->jmaWeeklyWeather[$id]['rainy'])) {
			$this->jmaWeeklyWeather[$id]['rainy'] = '';
		}
		$this->jmaWeeklyWeather[$id]['rainy'] .= (string)$val;
		if ($key % 4 != 3)	$this->jmaWeeklyWeather[$id]['rainy'] .= '/';
	}
	//不明要素を空文字で埋める（VPFD51の場合）
	if ($forecast == 0) {
		for ($i = 0; $i < 3; $i++) {
			if (! isset($this->jmaWeeklyWeather[$i]['weather'])) {
				$this->jmaWeeklyWeather[$i]['weather'] = '';
			}
			if (! isset($this->jmaWeeklyWeather[$i]['image'])) {
				$this->jmaWeeklyWeather[$i]['image'] = '';
			}
			if (! isset($this->jmaWeeklyWeather[$i]['rainy'])) {
				$this->jmaWeeklyWeather[$i]['rainy'] = '';
			}
			if (! isset($this->jmaWeeklyWeather[$i]['temp_min'])) {
				$this->jmaWeeklyWeather[$i]['temp_min'] = '';
			}
			if (! isset($this->jmaWeeklyWeather[$i]['temp_max'])) {
				$this->jmaWeeklyWeather[$i]['temp_max'] = '';
			}
		}
	}

	//配列へ代入
	$items = $this->jmaWeeklyWeather;
	return TRUE;
}
